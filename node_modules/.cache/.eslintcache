[{"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\index.js":"1","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\App.js":"2","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\reportWebVitals.js":"3","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Read.js":"4","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Navbar.js":"5","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Create.js":"6","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Update.js":"7","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Submitsuccessfull.js":"8","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Home.js":"9","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\About.js":"10","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Footer.js":"11"},{"size":687,"mtime":1677677951811,"results":"12","hashOfConfig":"13"},{"size":942,"mtime":1680705124145,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1676612864658,"results":"15","hashOfConfig":"13"},{"size":8476,"mtime":1680768668826,"results":"16","hashOfConfig":"13"},{"size":1334,"mtime":1679319348705,"results":"17","hashOfConfig":"13"},{"size":6103,"mtime":1681997210366,"results":"18","hashOfConfig":"13"},{"size":3328,"mtime":1680708994323,"results":"19","hashOfConfig":"13"},{"size":611,"mtime":1680709395306,"results":"20","hashOfConfig":"13"},{"size":2837,"mtime":1680705079901,"results":"21","hashOfConfig":"13"},{"size":626,"mtime":1680704844378,"results":"22","hashOfConfig":"13"},{"size":2359,"mtime":1677585666290,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"duhl7o",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\index.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\App.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\reportWebVitals.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Read.js",["58"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\";\r\nimport {\r\n  MDBTable,\r\n  MDBTableHead,\r\n  MDBTableBody,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBBtn,\r\n  MDBBtnGroup,\r\n} from \"mdb-react-ui-kit\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Switch } from \"@mui/material\";\r\n\r\nconst Read = () => {\r\n  const [data, setdata] = useState([]);\r\n  const [value, setValue] = useState();\r\n  const [sortvalue, setSortValue] = useState();\r\n  const [currentpage, setCorrentpage] = useState(0);\r\n  // const [pagelimit] = useState(4);\r\n  const sortOptions = [\"name\", \"address\", \"email\", \"mobile\", \"status\"];\r\n  const [darkTheme, setDarktheme] = useState();\r\n\r\n  useEffect(() => {\r\n    userData(0,4,0);\r\n  },[]);\r\n\r\n  const userData = async () => {\r\n    return await axios\r\n      .get(`http://localhost:4000/users`)\r\n      .then((res) => {\r\n        setdata(res.data);\r\n        setCorrentpage(currentpage + 1);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  console.log(\"data\", data);\r\n\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    return await axios\r\n      .get(`http://localhost:4000/users?q=${value}`)\r\n      .then((res) => {\r\n        setdata(res.data);\r\n        setValue(\"\");\r\n        toast.success(\"Searching Data\")\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleReset = async (e) => {\r\n    e.preventDefault();\r\n    toast.warning(\"Redirectting Page\")\r\n    userData();\r\n  };\r\n  const handleSort = async (e) => {\r\n    let value = e.target.value;\r\n    setSortValue(value);\r\n    return await axios\r\n      .get(`http://localhost:4000/users?_sort=${value}&_order=asc`)\r\n      .then((res) => {\r\n        setdata(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleFilter = async (value) => {\r\n    return await axios\r\n      .get(`http://localhost:4000/users?status=${value}`)\r\n      .then((res) => {\r\n        setdata(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const pagination = () => {\r\n    \r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    console.log(\"id is : \", id);\r\n    axios.delete(`http://localhost:4000/users/${id}`).then(() => {\r\n      userData();\r\n    });\r\n    toast.error(\"delete successfull\");\r\n  };\r\n\r\n  const toLocalStorage = (id, name, email, mobile, address, status) => {\r\n    localStorage.setItem(\"id\", id);\r\n    localStorage.setItem(\"name\", name);\r\n    localStorage.setItem(\"email\", email);\r\n    localStorage.setItem(\"mobile\", mobile);\r\n    localStorage.setItem(\"address\", address);\r\n    localStorage.setItem(\"status\", status);\r\n  };\r\n  return (\r\n    <>\r\n      <MDBContainer>\r\n        <form\r\n          style={{\r\n            margin: \"auto\",\r\n            padding: \"15px\",\r\n            maxWidth: \"500px\",\r\n            alignContent: \"center\",\r\n          }}\r\n          className=\"d-flex mb-3\"\r\n          onSubmit={handleSearch}\r\n        >\r\n          <input\r\n            className=\"form-control\"\r\n            placeholder=\"Search Name..\"\r\n            aria-label=\"Search\"\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n          />\r\n          <MDBBtnGroup>\r\n            <MDBBtn color=\"warning\" type=\"submit\">\r\n              Search\r\n            </MDBBtn>\r\n            <MDBBtn color=\"danger\" onClick={handleReset}>\r\n              Reset\r\n            </MDBBtn>\r\n          </MDBBtnGroup>\r\n        </form>\r\n        <h2>Pagination Missing</h2>\r\n        <div>\r\n          <MDBRow>\r\n            <MDBCol size=\"12\">\r\n              <MDBBtn color=\"warning\">\r\n                <Switch\r\n                  checked={darkTheme}\r\n                  onClick={() => {\r\n                    if (darkTheme === \"table-dark\") setDarktheme(\"\");\r\n                    else setDarktheme(\"table-dark\");\r\n                  }}\r\n                />\r\n              </MDBBtn>\r\n              <MDBTable className={`${darkTheme}`}>\r\n                <MDBTableHead dark>\r\n                  <tr>\r\n                    <th scope=\"col\">Sr.No.</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">Phone</th>\r\n                    <th scope=\"col\">Address</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th>Operations</th>\r\n                    <th>\r\n                      <Link to=\"/create\">\r\n                        <MDBBtn color=\"warning\">Add New User</MDBBtn>\r\n                      </Link>\r\n                    </th>\r\n                  </tr>\r\n                </MDBTableHead>\r\n                {data.length === 0 ? (\r\n                  <MDBTableBody className=\"align-center mb-0\">\r\n                    tr\r\n                    <tr>\r\n                      <td colSpan={8} className=\"text-center mb-0\">\r\n                        No Data Found\r\n                      </td>\r\n                    </tr>\r\n                  </MDBTableBody>\r\n                ) : (\r\n                  data.map((item, index) => (\r\n                    <MDBTableBody style={{ backgroundColor: \"pink\" }}>\r\n                      <tr>\r\n                        <th scope=\"row\">{index + 1}</th>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.email}</td>\r\n                        <td>{item.mobile}</td>\r\n                        <td>{item.address}</td>\r\n                        <td>{item.status}</td>\r\n                        <td>\r\n                          <MDBBtn\r\n                            color=\"danger\"\r\n                            onClick={() => handleDelete(item.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </MDBBtn>\r\n                        </td>\r\n                        <td>\r\n                          <Link\r\n                            to=\"/update\"\r\n                            onClick={() =>\r\n                              toLocalStorage(\r\n                                item.id,\r\n                                item.name,\r\n                                item.email,\r\n                                item.mobile,\r\n                                item.address,\r\n                                item.status\r\n                              )\r\n                            }\r\n                          >\r\n                            {\" \"}\r\n                            <MDBBtn>\r\n                              <UpdateIcon />\r\n                            </MDBBtn>\r\n                          </Link>\r\n                        </td>\r\n                      </tr>\r\n                    </MDBTableBody>\r\n                  ))\r\n                )}\r\n              </MDBTable>\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </div>\r\n        <MDBRow>\r\n          <MDBCol size=\"4\">\r\n            <h5>Sort by :</h5>\r\n            <select\r\n              style={{ width: \"50%\", borderRadius: \"2px\", height: \"35px\" }}\r\n              onChange={handleSort}\r\n              value={sortvalue}\r\n            >\r\n              <option>Please Select Value</option>\r\n              {sortOptions.map((item, index) => (\r\n                <option value={item} key={index}>\r\n                  {item}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </MDBCol>\r\n\r\n          <MDBCol size=\"4\">\r\n            <div>{pagination()}</div>\r\n          </MDBCol>\r\n\r\n          <MDBCol size=\"4\">\r\n            <h4>Filter by Status</h4>\r\n            <MDBBtnGroup>\r\n              <MDBBtn color=\"info\" onClick={() => handleFilter(\"Open\")}>\r\n                Open\r\n              </MDBBtn>\r\n              <MDBBtn color=\"warning\" onClick={() => handleFilter(\"Working\")}>\r\n              Working\r\n              </MDBBtn>\r\n              <MDBBtn color=\"info\" onClick={() => handleFilter(\"Done\")}>\r\n              Done\r\n              </MDBBtn>\r\n              <MDBBtn color=\"warning\" onClick={() => handleFilter(\"OverDue\")}>\r\n                Overdue\r\n              </MDBBtn>\r\n            </MDBBtnGroup>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n      <ToastContainer\r\nposition=\"top-right\"\r\nautoClose={5000}\r\nhideProgressBar={false}\r\nnewestOnTop={false}\r\ncloseOnClick\r\nrtl={false}\r\npauseOnFocusLoss\r\ndraggable\r\npauseOnHover\r\ntheme=\"light\"\r\n/>\r\n{/* Same as */}\r\n<ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Read;\r\n","C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Navbar.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Create.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Update.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Submitsuccessfull.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Home.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\About.js",[],[],"C:\\Users\\gorak\\OneDrive\\Desktop\\Complete Project\\Survay\\src\\Componant\\Footer.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":31,"column":5,"nodeType":"61","endLine":31,"endColumn":7,"suggestions":"62"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["63"],{"desc":"64","fix":"65"},"Update the dependencies array to be: [userData]",{"range":"66","text":"67"},[948,950],"[userData]"]